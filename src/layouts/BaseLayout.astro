---
import Header from '@components/Header.astro'
import Footer from '@components/Footer.astro'

import { SITE, LOCALE } from '@config'

import '@styles/global.min.css'

export interface Props {
	title?: string
	author?: string
	description?: string
	ogImage?: string
	canonicalURL?: string
	pubDatetime?: Date
	modDatetime?: Date | null
	scrollSmooth?: boolean
}

const { 
	title,
	author = SITE.author,
	description = SITE.desc,
	ogImage = SITE.ogImage,
	canonicalURL = new URL(Astro.url.pathname, Astro.site).href,
} = Astro.props
---

<!doctype html>
<html lang=`${ LOCALE.lang ?? "en" }`>
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={ description } />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={ Astro.generator } />
		<meta name="robots" content="all">
		
		<meta name="title" content={ title + SITE.title } />
		<meta name="author" content={ author } />
		<meta name="Copyright" content={ author }/>
		<link rel="sitemap" href="/sitemap-index.xml" />
		
		<meta property="og:title" content={ title + SITE.title}>
		<meta property="og:description" content={ description }>
		<meta property="og:image" content={ ogImage }>
		<meta property="image" content={ ogImage }>

		<meta property="twitter:card" content="summary_large_image" />
		<meta property="twitter:url" content={ canonicalURL } />
		<meta property="twitter:title" content={ title + SITE.title } />
		<meta property="twitter:description" content={ description } />
		<meta property="twitter:image" content={ ogImage } />
		
		<meta name="Description" content={ description }/>
		<meta name="Keywords" content="coffee blog, 咖啡blog, cafe blog, blog, 博客, cafe博客, 咖啡, cafe"/>
		
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

		<meta name="theme-color" content="" />
		
		<title>{ title + SITE.title }</title>

		<link rel="shortcut icon" href="https://cdn.jsdelivr.net/gh/cafekiller/cafe.cdn/images/favicon.ico" type="image/x-icon">
		
		<script src="/MyBlog/toggleTheme.min.js" is:inline></script>
	</head>

	<body style="zoom: var(--zoom)">
		<div class="wrapper">
			<Header></Header>
			<slot />
		</div>
		<Footer/>
	</body>

</html>



<!-- <script is:inline >
	const primaryColorScheme = "" // 预设主题色

	// 获取本地存储的 主题色
	const currentTheme = localStorage.getItem("__cafe-blog_theme")

	/**
	 * @description 获取用户设备的偏好主题色, 优先获取本地存储中的主题色,
	 * 其次获取预设的主题色, 最后获取系统的偏好主题色.
	 * @returns { String } 返回主题色
	 * */ 
	const getPreferTheme = () => {
		
		if (currentTheme) return currentTheme

		if (primaryColorScheme) return primaryColorScheme

		return window.matchMedia("(prefers-color-scheme: dark)").matches
			? "dark"
			: "light"
	}

	// 获取用户设备的偏好主题
	let themeValue = getPreferTheme()

	// 设置偏好
	const setPreference = () => {
		localStorage.setItem("__cafe-blog_theme", themeValue)
		reflectPreference()
	}

	/**
	 * @description 将设置的偏好主题色响应到页面样式和结构中
	 * */ 
	const reflectPreference = () => {
		
		document.firstElementChild.setAttribute("data-theme", themeValue)
		document.body.setAttribute("data-theme", themeValue)
		
		document.querySelector("#theme-btn")?.setAttribute("aria-label", themeValue)

		if (themeValue === 'dark') {
			document.documentElement.classList.add('dark')
		} else {
			document.documentElement.classList.remove('dark')
		}

		// 设置 meta 值
		const body = document.body
		if (body) {
			const computedStyles = window.getComputedStyle(body)
			const bgColor = computedStyles.backgroundColor
			document.querySelector("meta[name='theme-color']")
					?.setAttribute("content", bgColor)
		}
	}

	reflectPreference()

	// 设置主题切换按钮
	window.onload = () => {
		function setThemeFeature() {
			// 设置初始值，以便屏幕阅读器能够获取最新的值
			reflectPreference();

			document.querySelector("#theme-btn")?.addEventListener("click", () => {
				themeValue = themeValue === "light" ? "dark" : "light"            
				setPreference()
			})
		}

		setThemeFeature()

		// "astro:after-swap" 事件用于新页面替换旧页面时使用
		document.addEventListener("astro:after-swap", setThemeFeature)
	}

	// 同步系统更改
	window.matchMedia("(prefers-color-scheme: dark)")
			.addEventListener("change", ({ matches: isDark }) => {  
				themeValue = isDark ? "dark" : "light"
				setPreference()
			}
		)
</script> -->

<script>
	import { themeValue } from '@utils/themeUtil'
	import { iLog } from '@utils/iLogUtil'

	iLog.info("CurrentTime", new Date().toLocaleString("zh-CN", { hour12: false }))
	iLog.info("Copyright", "Coffee_Killer")	

	iLog.info("当前用户的主题偏好：", themeValue)
</script>