---
import BaseLayout from '@/layouts/BaseLayout.astro'
import { getCollection } from 'astro:content'
import { allMdArr } from '@/utils/astroUtil'

import '@/styles/global.min.css'

export async function getStaticPaths(): Promise<any[]> {

    // 过滤文章对象中的 tag (不重复) 转换为数组
    const uniqueTags: Array<string> = [...new Set(allMdArr.map((md) => md.data.tags).flat())]
                                    .concat(['posts', 'games', 'articles'])
    
    // 通过 tag 过滤出相关 .md 文章集合
    return uniqueTags.map((tag) => {
        
        const filteredPosts = allMdArr.filter((md) => md.data.tags.includes(tag));
        return {
            params: { tag },
            props: { posts: filteredPosts },
        };
    });
}

let { tag } = Astro.params
let { posts } = Astro.props 
let title = `与「 ${ tag } 」相关的文章`

switch (tag) {
    case 'posts':
        posts = await getCollection('posts')
        tag = '技术博客'
        title = `「 技术博客 」类的全部文章`
        break
    case 'games':
        posts = await getCollection('games')
        tag = '游戏讨论'
        title = `「 游戏讨论 」类的全部文章`
        break
    case 'articles':
        posts = await getCollection('articles')
        tag = '各类杂谈'
        title = `「 各类杂谈 」类的全部文章`
        break
}
---
<BaseLayout title={ tag }>
    <main class='filter-cont'>
        <h1 class='title'>{ title }</h1>
        <ul class='filter-list'>
            <!-- 渲染 过滤后的文章集合 信息 -->
            { 
                posts.map( (post:any) => {
                    return (
                        <li>
                            <a href={`/MyBlog/${post.collection}/${post.slug}`} >
                                {post.data.title}
                                <span></span>
                            </a>
                        </li>
                    )
                })
            }
        </ul>
    </main>
</BaseLayout>

<style lang="scss">
    .filter-cont {
        padding: 20px 30px 40px;
        .title {
            font-weight: 400;
            font-size: 28px;
            line-height: 42px;
            color: var(--fontcolor1);
        } 
        .filter-list {
            margin-top: 38px;
            li {
                position: relative;
                list-style: none;
                padding-left: 48px;
                margin-bottom: 10px;
                &::before {
                    content: "";
                    position: absolute;
                    top: 50%;
                    left: 24px;
                    width: 8px;
                    height: 8px;
                    background-color: var(--fontcolor2);
                    transform: rotateZ(45deg) translateY(-50%);
                    transition: all .25s ease;
                }
                a {
                    position: relative;
                    font-size: 18px;
                    line-height: 38px;
                    color: var(--fontcolor2);
                    transition: all .25s ease;
                    span {
                        position: absolute;
                        left: 0;
                        bottom: 0;
                        width: 0;
                        height: 1px;
                        background-color: var(--fontcolor2);
                        color: var(--fontcolor2);
                        transition: all .25s ease;
                    }
                }
                &:hover {
                    &::before {
                        background-color: var(--main-color);
                    }
                    a {
                        color: var(--main-color);
                        span {
                            width: 100%;
                            color: var(--main-color);
                            background-color: var(--main-color);
                        }
                    }
                }
            }
        }
    }
</style>