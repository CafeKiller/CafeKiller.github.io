---
import BaseLayout from '../../layouts/BaseLayout.astro'
import { getCollection } from 'astro:content'

import '../../styles/global.min.css'

export async function getStaticPaths(): Promise<any[]> {
  
    const createAllMd = async () => {
        let _array:Array<any> = []

        return _array.concat(await getCollection('posts'))
                    .concat(await getCollection('games'))
                    .concat(await getCollection('articles'))
    }
    // 获取所有 .md 文章对象
    const allPosts: Array<any> = await createAllMd()

    // 过滤文章对象中的 tag (不重复) 转换为数组
    const uniqueTags: Array<string> = [...new Set(allPosts.map((post) => post.data.tags).flat())]
                                    .concat(['posts', 'games', 'articles'])
    
    // 通过 tag 过滤出相关 .md 文章集合
    return uniqueTags.map((tag) => {
        
        const filteredPosts = allPosts.filter((post) => post.data.tags.includes(tag));
        return {
            params: { tag },
            props: { posts: filteredPosts },
        };
    });
}

let { tag } = Astro.params
let { posts } = Astro.props 

switch (tag) {
    case 'posts':
        posts = await getCollection('posts')
        tag = '技术博客'
        break
    case 'games':
        posts = await getCollection('games')
        tag = '游戏讨论'
        break
    case 'articles':
        posts = await getCollection('articles')
        tag = '各类杂谈'
        break
}
---
<BaseLayout title={ tag }>
    <main class='filter-cont'>
        <h1 class='title'>与「 { tag } 」相关的文章</h1>
        <ul class='filter-list'>
            <!-- 渲染 过滤后的文章集合 信息 -->
            { 
                posts.map( (post:any) => {
                    return (
                        <li>
                            <a href={`/MyBlog/${post.collection}/${post.slug}`} >
                                {post.data.title}
                                <span></span>
                            </a>
                        </li>
                    )
                })
            }
        </ul>
    </main>
</BaseLayout>

<style>
    .filter-cont {
        padding: 20px 30px 40px;
    }
    .filter-cont .title {
        font-weight: 400;
        font-size: 28px;
        line-height: 42px;
    } 
    .filter-list {
        margin-top: 38px;
    }
    .filter-list li {
        position: relative;
        list-style: none;
        padding-left: 48px;
        margin-bottom: 10px;
    }
    .filter-list li::before {
        content: "";
        position: absolute;
        top: 50%;
        left: 24px;
        width: 8px;
        height: 8px;
        background-color: var(--black6);
        transform: rotateZ(45deg) translateY(-50%);
        transition: all .25s ease;
    }
    .filter-list li a {
        position: relative;
        font-size: 18px;
        line-height: 38px;
        color: var(--black6);
        transition: all .25s ease;
    }
    .filter-list li a span {
        position: absolute;
        left: 0;
        bottom: 0;
        width: 0;
        height: 1px;
        background-color: var(--black6);
        color: var(--black6);
        transition: all .25s ease;
    }
    .filter-list li:hover::before {
        background-color: var(--main-color);
    }
    .filter-list li:hover a {
        color: var(--main-color);
    }
    .filter-list li:hover a span {
        width: 100%;
        color: var(--main-color);
        background-color: var(--main-color);
    }
</style>